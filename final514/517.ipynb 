{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 33
    },
    "colab_type": "code",
    "id": "lVquczr_nz7_",
    "outputId": "72c28db7-880c-4b34-93fa-ae5d7f2fbee5"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from sklearn.model_selection import train_test_split\n",
    "from datetime import datetime as dt\n",
    "\n",
    "\n",
    "#----------------------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 33
    },
    "colab_type": "code",
    "id": "zdepvs6UomHR",
    "outputId": "250a56db-9f13-47f1-8a40-f45ab039d4c3"
   },
   "outputs": [],
   "source": [
    "#-----------------------------------------------------\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "#----------------------------------------------------\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn import metrics\n",
    "#----------------------------------------------------\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 227
    },
    "colab_type": "code",
    "id": "83rKmQojpBJU",
    "outputId": "f9cb282b-cbaf-4b10-b7e5-c28b8a9384e6"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import keras \n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Dropout\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 227
    },
    "colab_type": "code",
    "id": "hx9fb7sTpNCE",
    "outputId": "306fa50f-de8e-48d0-fc71-61fa9be3fd7c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>symmetry_mean</th>\n",
       "      <th>fractal_dimension_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "      <th>diagnosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>0.07871</td>\n",
       "      <td>...</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>0.05667</td>\n",
       "      <td>...</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>0.05999</td>\n",
       "      <td>...</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>0.09744</td>\n",
       "      <td>...</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>0.1809</td>\n",
       "      <td>0.05883</td>\n",
       "      <td>...</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   radius_mean  texture_mean  perimeter_mean  area_mean  smoothness_mean  \\\n",
       "0        17.99         10.38          122.80     1001.0          0.11840   \n",
       "1        20.57         17.77          132.90     1326.0          0.08474   \n",
       "2        19.69         21.25          130.00     1203.0          0.10960   \n",
       "3        11.42         20.38           77.58      386.1          0.14250   \n",
       "4        20.29         14.34          135.10     1297.0          0.10030   \n",
       "\n",
       "   compactness_mean  concavity_mean  concave points_mean  symmetry_mean  \\\n",
       "0           0.27760          0.3001              0.14710         0.2419   \n",
       "1           0.07864          0.0869              0.07017         0.1812   \n",
       "2           0.15990          0.1974              0.12790         0.2069   \n",
       "3           0.28390          0.2414              0.10520         0.2597   \n",
       "4           0.13280          0.1980              0.10430         0.1809   \n",
       "\n",
       "   fractal_dimension_mean  ...  texture_worst  perimeter_worst  area_worst  \\\n",
       "0                 0.07871  ...          17.33           184.60      2019.0   \n",
       "1                 0.05667  ...          23.41           158.80      1956.0   \n",
       "2                 0.05999  ...          25.53           152.50      1709.0   \n",
       "3                 0.09744  ...          26.50            98.87       567.7   \n",
       "4                 0.05883  ...          16.67           152.20      1575.0   \n",
       "\n",
       "   smoothness_worst  compactness_worst  concavity_worst  concave points_worst  \\\n",
       "0            0.1622             0.6656           0.7119                0.2654   \n",
       "1            0.1238             0.1866           0.2416                0.1860   \n",
       "2            0.1444             0.4245           0.4504                0.2430   \n",
       "3            0.2098             0.8663           0.6869                0.2575   \n",
       "4            0.1374             0.2050           0.4000                0.1625   \n",
       "\n",
       "   symmetry_worst  fractal_dimension_worst  diagnosis  \n",
       "0          0.4601                  0.11890          M  \n",
       "1          0.2750                  0.08902          M  \n",
       "2          0.3613                  0.08758          M  \n",
       "3          0.6638                  0.17300          M  \n",
       "4          0.2364                  0.07678          M  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('Brest Cancer Dataset.csv')\n",
    "df.shape\n",
    "\n",
    "\n",
    "df.drop(['id'], axis = 1, inplace = True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 66
    },
    "colab_type": "code",
    "id": "X5jwStGIsukX",
    "outputId": "6dda5974-8aef-4f64-d24b-81746ba69d9f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "B    357\n",
       "M    212\n",
       "Name: diagnosis, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['diagnosis'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 115
    },
    "colab_type": "code",
    "id": "3l2IUlrjs7n-",
    "outputId": "86a09c52-ec77-4d16-b8dd-fa91f8611d89"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    0\n",
       "2    0\n",
       "3    0\n",
       "4    0\n",
       "Name: diagnosis, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#maping M to 0 and B to 0\n",
    "df['diagnosis'] = df['diagnosis'].map({'M': 0, 'B': 1})\n",
    "df['diagnosis'].head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 82
    },
    "colab_type": "code",
    "id": "unjrl3U_rMls",
    "outputId": "58288e38-97a3-422d-a30e-8326b6bea25c"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'KFold' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-8162c5cc487a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m#                                                    random_state = 0)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mkf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKFold\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0mKFold\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'KFold' is not defined"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "#train_test_split(X, Y, test_size = 0.1,random_state = 0\n",
    "\n",
    "#X_train, X_test, Y_train, Y_test = train_test_split(X,\n",
    "#                                                    test_size = 0.1,\n",
    "#                                                    random_state = 0)\n",
    "\n",
    "kf = KFold(n_splits=10)\n",
    "KFold(n_splits=10, shuffle=False, random_state=None)\n",
    "\n",
    "for train_index, test_index in kf.split(X):\n",
    "     print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n",
    "     X_train, X_test = X[train_index], X[test_index]\n",
    "     Y_train, Y_test = Y[train_index], Y[test_index]\n",
    "print(X_train.shape)\n",
    "print(Y_train.shape)\n",
    "print(X_test.shape)\n",
    "print(Y_test.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Jc4kiZaYuyYV"
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "1DdqU07Ku5AB"
   },
   "source": [
    "## KNN Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 385,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 261
    },
    "colab_type": "code",
    "id": "eTntgWpiu9Ix",
    "outputId": "94e848c7-06de-4a8f-f918-6ec4fe0643a8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time taken to complete random search:  0:00:00.002918\n",
      "Accuracy Score: 0.9642857142857143\n",
      "Precision Score: 0.9767441860465116\n",
      "Recall Score: 0.9767441860465116\n",
      "F1 Score: 0.9767441860465116\n",
      "Classification Report: \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.92      0.92        13\n",
      "           1       0.98      0.98      0.98        43\n",
      "\n",
      "    accuracy                           0.96        56\n",
      "   macro avg       0.95      0.95      0.95        56\n",
      "weighted avg       0.96      0.96      0.96        56\n",
      "\n"
     ]
    }
   ],
   "source": [
    "st=dt.now()\n",
    "knn = KNeighborsClassifier(n_neighbors =5)\n",
    "knn.fit(X_train, Y_train)\n",
    "print(\"Time taken to complete random search: \",dt.now()-st)\n",
    "\n",
    "\n",
    "knn_pred = knn.predict(X_test)\n",
    "\n",
    "#Model Evaluation\n",
    "kacc = accuracy_score(Y_test, knn_pred)\n",
    "print('Accuracy Score: ' + str(kacc))\n",
    "\n",
    "print('Precision Score: ' + str(precision_score(Y_test, knn_pred)))\n",
    "\n",
    "print('Recall Score: ' + str(recall_score(Y_test, knn_pred)))\n",
    "\n",
    "print('F1 Score: ' + str(f1_score(Y_test, knn_pred)))\n",
    "\n",
    "print('Classification Report: \\n' + str(classification_report(Y_test, knn_pred)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Qb10b-QkvAH6"
   },
   "source": [
    "## Polynomial Support Vector Machine Classifiers\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 261
    },
    "colab_type": "code",
    "id": "ekjLnmoVvBqF",
    "outputId": "f6c2de51-9ddd-4337-a199-daa67dbc5871"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time taken to complete random search:  0:00:00.012906\n",
      "Accuracy Score: 0.9821428571428571\n",
      "Precision Score: 0.9772727272727273\n",
      "Recall Score: 1.0\n",
      "F1 Score: 0.9885057471264368\n",
      "Classification Report: \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.92      0.96        13\n",
      "           1       0.98      1.00      0.99        43\n",
      "\n",
      "    accuracy                           0.98        56\n",
      "   macro avg       0.99      0.96      0.97        56\n",
      "weighted avg       0.98      0.98      0.98        56\n",
      "\n"
     ]
    }
   ],
   "source": [
    "st=dt.now()\n",
    "p_svc = SVC(kernel = 'poly')\n",
    "p_svc.fit(X_train, Y_train)\n",
    "print(\"Time taken to complete random search: \",dt.now()-st)\n",
    "\n",
    "p_pred = p_svc.predict(X_test)\n",
    "\n",
    "#Model Evaluation\n",
    "lsvcacc = accuracy_score(Y_test, p_pred)\n",
    "print('Accuracy Score: ' + str(lsvcacc))\n",
    "\n",
    "print('Precision Score: ' + str(precision_score(Y_test, l_pred)))\n",
    "\n",
    "print('Recall Score: ' + str(recall_score(Y_test, l_pred)))\n",
    "\n",
    "print('F1 Score: ' + str(f1_score(Y_test, l_pred)))\n",
    "\n",
    "print('Classification Report: \\n' + str(classification_report(Y_test, l_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 261
    },
    "colab_type": "code",
    "id": "RYhFtCxRvHeG",
    "outputId": "603dbb68-3868-49ea-8ac4-222ba8f01136"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time taken to complete random search:  0:00:00.017108\n",
      "Accuracy Score: 0.9821428571428571\n",
      "Precision Score: 0.9772727272727273\n",
      "Recall Score: 1.0\n",
      "F1 Score: 0.9885057471264368\n",
      "Classification Report: \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.92      0.96        13\n",
      "           1       0.98      1.00      0.99        43\n",
      "\n",
      "    accuracy                           0.98        56\n",
      "   macro avg       0.99      0.96      0.97        56\n",
      "weighted avg       0.98      0.98      0.98        56\n",
      "\n"
     ]
    }
   ],
   "source": [
    "st=dt.now()\n",
    "gk_svc = SVC(kernel = 'rbf')\n",
    "gk_svc.fit(X_train, Y_train)\n",
    "print(\"Time taken to complete random search: \",dt.now()-st)\n",
    "\n",
    "gk_pred = gk_svc.predict(X_test)\n",
    "\n",
    "#Model Evaluation\n",
    "ksvcaccacc = accuracy_score(Y_test, gk_pred)\n",
    "print('Accuracy Score: ' + str(ksvcaccacc))\n",
    "\n",
    "print('Precision Score: ' + str(precision_score(Y_test, gk_pred)))\n",
    "\n",
    "print('Recall Score: ' + str(recall_score(Y_test, gk_pred)))\n",
    "\n",
    "print('F1 Score: ' + str(f1_score(Y_test, gk_pred)))\n",
    "\n",
    "print('Classification Report: \\n' + str(classification_report(Y_test, gk_pred)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "eVrSlVu3vJ_Q"
   },
   "source": [
    "## Random Forest Classifier\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 261
    },
    "colab_type": "code",
    "id": "K7tyPCf5vLGf",
    "outputId": "ab0d84be-b5b3-4368-d33d-7cbd9e0d9c28"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time taken to complete random search:  0:00:00.166743\n",
      "Accuracy Score: 1.0\n",
      "Precision Score: 1.0\n",
      "Recall Score: 1.0\n",
      "F1 Score: 1.0\n",
      "Classification Report: \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        13\n",
      "           1       1.00      1.00      1.00        43\n",
      "\n",
      "    accuracy                           1.00        56\n",
      "   macro avg       1.00      1.00      1.00        56\n",
      "weighted avg       1.00      1.00      1.00        56\n",
      "\n"
     ]
    }
   ],
   "source": [
    "st=dt.now()\n",
    "randomforest = RandomForestClassifier(n_estimators = 100, \n",
    "                                      random_state = 0, criterion = 'gini')\n",
    "randomforest.fit(X_train, Y_train)\n",
    "print(\"Time taken to complete random search: \",dt.now()-st)\n",
    "\n",
    "random_pred = randomforest.predict(X_test)\n",
    "\n",
    "#Model Evaluation\n",
    "rmacc = accuracy_score(Y_test, random_pred)\n",
    "print('Accuracy Score: ' + str(rmacc))\n",
    "\n",
    "print('Precision Score: ' + str(precision_score(Y_test, random_pred)))\n",
    "\n",
    "print('Recall Score: ' + str(recall_score(Y_test, random_pred)))\n",
    "\n",
    "print('F1 Score: ' + str(f1_score(Y_test, random_pred)))\n",
    "\n",
    "print('Classification Report: \\n' + str(classification_report(Y_test, random_pred)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "znuuHTFavN0y"
   },
   "source": [
    "## Decision Tree Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 261
    },
    "colab_type": "code",
    "id": "63jo8qvwvPMR",
    "outputId": "c502966d-21af-458a-c53a-cb311ef8288f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time taken to complete random search:  0:00:00.008578\n",
      "Accuracy Score: 0.9107142857142857\n",
      "Precision Score: 0.9523809523809523\n",
      "Recall Score: 0.9302325581395349\n",
      "F1 Score: 0.9411764705882352\n",
      "Classification Report: \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.79      0.85      0.81        13\n",
      "           1       0.95      0.93      0.94        43\n",
      "\n",
      "    accuracy                           0.91        56\n",
      "   macro avg       0.87      0.89      0.88        56\n",
      "weighted avg       0.91      0.91      0.91        56\n",
      "\n"
     ]
    }
   ],
   "source": [
    "st=dt.now()\n",
    "decison = DecisionTreeClassifier(criterion = 'gini', \n",
    "                                 random_state = 0)\n",
    "decison.fit(X_train, Y_train)\n",
    "print(\"Time taken to complete random search: \",dt.now()-st)\n",
    "\n",
    "decison_pred = decison.predict(X_test)\n",
    "\n",
    "#Model Evaluation\n",
    "dtacc = accuracy_score(Y_test, decison_pred)\n",
    "print('Accuracy Score: ' + str(dtacc))\n",
    "\n",
    "print('Precision Score: ' + str(precision_score(Y_test, decison_pred)))\n",
    "\n",
    "print('Recall Score: ' + str(recall_score(Y_test, decison_pred)))\n",
    "\n",
    "print('F1 Score: ' + str(f1_score(Y_test, decison_pred)))\n",
    "\n",
    "print('Classification Report: \\n' + str(classification_report(Y_test, decison_pred)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "OxFB4X9Qvahr"
   },
   "source": [
    "## Neural Networks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 399,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 358
    },
    "colab_type": "code",
    "id": "5Jb6rBwavZK2",
    "outputId": "662e43bf-e743-4934-8f78-efc2659506a4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_24\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_93 (Dense)             (None, 20)                620       \n",
      "_________________________________________________________________\n",
      "dropout_70 (Dropout)         (None, 20)                0         \n",
      "_________________________________________________________________\n",
      "dense_94 (Dense)             (None, 20)                420       \n",
      "_________________________________________________________________\n",
      "dropout_71 (Dropout)         (None, 20)                0         \n",
      "_________________________________________________________________\n",
      "dense_95 (Dense)             (None, 20)                420       \n",
      "_________________________________________________________________\n",
      "dropout_72 (Dropout)         (None, 20)                0         \n",
      "_________________________________________________________________\n",
      "dense_96 (Dense)             (None, 1)                 21        \n",
      "=================================================================\n",
      "Total params: 1,481\n",
      "Trainable params: 1,481\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "#Building Our Model\n",
    "# Initialising the ANN\n",
    "classifier = Sequential()\n",
    "\n",
    "#Input and 1st Hidden Layer\n",
    "classifier.add(Dense(units = 20,\n",
    "                     activation = 'relu',\n",
    "                     kernel_initializer = 'uniform',\n",
    "                     input_dim = 30))\n",
    "classifier.add(Dropout(p = 0.2))\n",
    "\n",
    "\n",
    "#2nd Hidden Layer\n",
    "classifier.add(Dense(units = 20,\n",
    "                     activation = 'relu',\n",
    "                     kernel_initializer = 'uniform'))\n",
    "classifier.add(Dropout(p = 0.2))   \n",
    "\n",
    "\n",
    "#3rd Hidden Layer\n",
    "classifier.add(Dense(units = 20,\n",
    "                     activation = 'relu',\n",
    "                     kernel_initializer = 'uniform'))\n",
    "classifier.add(Dropout(p = 0.2))               \n",
    "\n",
    "#Output Layer\n",
    "classifier.add(Dense(units = 1,\n",
    "                     activation = 'sigmoid',\n",
    "                     kernel_initializer = 'uniform'))\n",
    "\n",
    "classifier.compile(optimizer = 'SGD',\n",
    "                   loss = 'binary_crossentropy',\n",
    "                   metrics = ['accuracy']) \n",
    "classifier.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "id": "GfHO3yJ0xzpW",
    "outputId": "2371d4c5-d4ae-4ff2-a96e-29824b57ffb6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 461 samples, validate on 52 samples\n",
      "Epoch 1/500\n",
      "461/461 [==============================] - 1s 2ms/step - loss: 0.6924 - accuracy: 0.6247 - val_loss: 0.6862 - val_accuracy: 0.7692\n",
      "Epoch 2/500\n",
      "461/461 [==============================] - 0s 114us/step - loss: 0.6870 - accuracy: 0.6876 - val_loss: 0.6823 - val_accuracy: 0.8846\n",
      "Epoch 3/500\n",
      "461/461 [==============================] - 0s 112us/step - loss: 0.6819 - accuracy: 0.6659 - val_loss: 0.6803 - val_accuracy: 0.6923\n",
      "Epoch 4/500\n",
      "461/461 [==============================] - 0s 110us/step - loss: 0.6722 - accuracy: 0.5575 - val_loss: 0.6826 - val_accuracy: 0.3462\n",
      "Epoch 5/500\n",
      "461/461 [==============================] - 0s 113us/step - loss: 0.6628 - accuracy: 0.5879 - val_loss: 0.6915 - val_accuracy: 0.2692\n",
      "Epoch 6/500\n",
      "461/461 [==============================] - 0s 112us/step - loss: 0.6484 - accuracy: 0.5944 - val_loss: 0.6999 - val_accuracy: 0.2692\n",
      "Epoch 7/500\n",
      "461/461 [==============================] - 0s 111us/step - loss: 0.6335 - accuracy: 0.6009 - val_loss: 0.6594 - val_accuracy: 0.5769\n",
      "Epoch 8/500\n",
      "461/461 [==============================] - 0s 113us/step - loss: 0.6283 - accuracy: 0.6811 - val_loss: 0.6742 - val_accuracy: 0.3462\n",
      "Epoch 9/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.6245 - accuracy: 0.6638 - val_loss: 0.6362 - val_accuracy: 0.7308\n",
      "Epoch 10/500\n",
      "461/461 [==============================] - 0s 112us/step - loss: 0.6030 - accuracy: 0.7397 - val_loss: 0.6088 - val_accuracy: 0.8654\n",
      "Epoch 11/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.5850 - accuracy: 0.7614 - val_loss: 0.5729 - val_accuracy: 0.8846\n",
      "Epoch 12/500\n",
      "461/461 [==============================] - 0s 113us/step - loss: 0.5539 - accuracy: 0.7852 - val_loss: 0.5325 - val_accuracy: 0.9038\n",
      "Epoch 13/500\n",
      "461/461 [==============================] - 0s 111us/step - loss: 0.5596 - accuracy: 0.7787 - val_loss: 0.5417 - val_accuracy: 0.9038\n",
      "Epoch 14/500\n",
      "461/461 [==============================] - 0s 113us/step - loss: 0.5160 - accuracy: 0.8243 - val_loss: 0.5553 - val_accuracy: 0.7692\n",
      "Epoch 15/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.4850 - accuracy: 0.8178 - val_loss: 0.4825 - val_accuracy: 0.8846\n",
      "Epoch 16/500\n",
      "461/461 [==============================] - 0s 112us/step - loss: 0.5606 - accuracy: 0.7419 - val_loss: 0.5853 - val_accuracy: 0.7500\n",
      "Epoch 17/500\n",
      "461/461 [==============================] - 0s 118us/step - loss: 0.5023 - accuracy: 0.8004 - val_loss: 0.6345 - val_accuracy: 0.5769\n",
      "Epoch 18/500\n",
      "461/461 [==============================] - 0s 111us/step - loss: 0.5267 - accuracy: 0.7744 - val_loss: 0.4652 - val_accuracy: 0.9231\n",
      "Epoch 19/500\n",
      "461/461 [==============================] - 0s 110us/step - loss: 0.5052 - accuracy: 0.7918 - val_loss: 0.5053 - val_accuracy: 0.8269\n",
      "Epoch 20/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.5050 - accuracy: 0.7831 - val_loss: 0.4259 - val_accuracy: 0.9231\n",
      "Epoch 21/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.4626 - accuracy: 0.8069 - val_loss: 0.4340 - val_accuracy: 0.8654\n",
      "Epoch 22/500\n",
      "461/461 [==============================] - 0s 110us/step - loss: 0.4473 - accuracy: 0.8416 - val_loss: 0.4153 - val_accuracy: 0.8654\n",
      "Epoch 23/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.4528 - accuracy: 0.8308 - val_loss: 0.4840 - val_accuracy: 0.8462\n",
      "Epoch 24/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.4275 - accuracy: 0.8612 - val_loss: 0.5695 - val_accuracy: 0.7500\n",
      "Epoch 25/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.4417 - accuracy: 0.8351 - val_loss: 0.3875 - val_accuracy: 0.9231\n",
      "Epoch 26/500\n",
      "461/461 [==============================] - 0s 115us/step - loss: 0.4517 - accuracy: 0.8069 - val_loss: 0.4520 - val_accuracy: 0.8654\n",
      "Epoch 27/500\n",
      "461/461 [==============================] - 0s 118us/step - loss: 0.3999 - accuracy: 0.8655 - val_loss: 0.4099 - val_accuracy: 0.8654\n",
      "Epoch 28/500\n",
      "461/461 [==============================] - 0s 112us/step - loss: 0.4062 - accuracy: 0.8482 - val_loss: 0.4890 - val_accuracy: 0.8269\n",
      "Epoch 29/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.3974 - accuracy: 0.8416 - val_loss: 0.4198 - val_accuracy: 0.9038\n",
      "Epoch 30/500\n",
      "461/461 [==============================] - 0s 114us/step - loss: 0.4066 - accuracy: 0.8308 - val_loss: 0.5260 - val_accuracy: 0.7692\n",
      "Epoch 31/500\n",
      "461/461 [==============================] - 0s 109us/step - loss: 0.4189 - accuracy: 0.8482 - val_loss: 0.4172 - val_accuracy: 0.8654\n",
      "Epoch 32/500\n",
      "461/461 [==============================] - 0s 110us/step - loss: 0.4294 - accuracy: 0.8265 - val_loss: 0.4903 - val_accuracy: 0.8077\n",
      "Epoch 33/500\n",
      "461/461 [==============================] - 0s 117us/step - loss: 0.4306 - accuracy: 0.8265 - val_loss: 0.3888 - val_accuracy: 0.8846\n",
      "Epoch 34/500\n",
      "461/461 [==============================] - 0s 111us/step - loss: 0.3740 - accuracy: 0.8525 - val_loss: 0.3513 - val_accuracy: 0.9038\n",
      "Epoch 35/500\n",
      "461/461 [==============================] - 0s 111us/step - loss: 0.3875 - accuracy: 0.8590 - val_loss: 0.4597 - val_accuracy: 0.8269\n",
      "Epoch 36/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.3466 - accuracy: 0.8807 - val_loss: 0.4936 - val_accuracy: 0.7885\n",
      "Epoch 37/500\n",
      "461/461 [==============================] - 0s 112us/step - loss: 0.3625 - accuracy: 0.8850 - val_loss: 0.4622 - val_accuracy: 0.8462\n",
      "Epoch 38/500\n",
      "461/461 [==============================] - 0s 112us/step - loss: 0.3464 - accuracy: 0.8894 - val_loss: 0.4254 - val_accuracy: 0.8654\n",
      "Epoch 39/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.3356 - accuracy: 0.8937 - val_loss: 0.3877 - val_accuracy: 0.8654\n",
      "Epoch 40/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.4057 - accuracy: 0.8655 - val_loss: 0.4542 - val_accuracy: 0.8846\n",
      "Epoch 41/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.4089 - accuracy: 0.8633 - val_loss: 0.3529 - val_accuracy: 0.9038\n",
      "Epoch 42/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.3884 - accuracy: 0.8568 - val_loss: 0.3462 - val_accuracy: 0.8654\n",
      "Epoch 43/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.3391 - accuracy: 0.8915 - val_loss: 0.3499 - val_accuracy: 0.8654\n",
      "Epoch 44/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.3809 - accuracy: 0.8438 - val_loss: 0.6082 - val_accuracy: 0.6923\n",
      "Epoch 45/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.3653 - accuracy: 0.8503 - val_loss: 0.3257 - val_accuracy: 0.9038\n",
      "Epoch 46/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.3687 - accuracy: 0.8677 - val_loss: 0.4118 - val_accuracy: 0.8462\n",
      "Epoch 47/500\n",
      "461/461 [==============================] - 0s 109us/step - loss: 0.3486 - accuracy: 0.8742 - val_loss: 0.3824 - val_accuracy: 0.8654\n",
      "Epoch 48/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.3361 - accuracy: 0.8742 - val_loss: 0.3192 - val_accuracy: 0.8846\n",
      "Epoch 49/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.3797 - accuracy: 0.8503 - val_loss: 0.3325 - val_accuracy: 0.9038\n",
      "Epoch 50/500\n",
      "461/461 [==============================] - 0s 109us/step - loss: 0.3542 - accuracy: 0.8633 - val_loss: 0.3249 - val_accuracy: 0.9038\n",
      "Epoch 51/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.3341 - accuracy: 0.8698 - val_loss: 0.3620 - val_accuracy: 0.8846\n",
      "Epoch 52/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.3178 - accuracy: 0.8872 - val_loss: 0.4468 - val_accuracy: 0.8462\n",
      "Epoch 53/500\n",
      "461/461 [==============================] - 0s 110us/step - loss: 0.3434 - accuracy: 0.8807 - val_loss: 0.3779 - val_accuracy: 0.8654\n",
      "Epoch 54/500\n",
      "461/461 [==============================] - 0s 110us/step - loss: 0.2883 - accuracy: 0.9046 - val_loss: 0.3571 - val_accuracy: 0.8846\n",
      "Epoch 55/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.3199 - accuracy: 0.8959 - val_loss: 0.3587 - val_accuracy: 0.8846\n",
      "Epoch 56/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2964 - accuracy: 0.9067 - val_loss: 0.3040 - val_accuracy: 0.8654\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 57/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.3419 - accuracy: 0.8764 - val_loss: 0.3296 - val_accuracy: 0.8654\n",
      "Epoch 58/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.3306 - accuracy: 0.8612 - val_loss: 0.2976 - val_accuracy: 0.9231\n",
      "Epoch 59/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.3094 - accuracy: 0.9002 - val_loss: 0.3446 - val_accuracy: 0.8846\n",
      "Epoch 60/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.3010 - accuracy: 0.8829 - val_loss: 0.3040 - val_accuracy: 0.8846\n",
      "Epoch 61/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.2913 - accuracy: 0.9002 - val_loss: 0.2988 - val_accuracy: 0.8654\n",
      "Epoch 62/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.3304 - accuracy: 0.8720 - val_loss: 0.2924 - val_accuracy: 0.9231\n",
      "Epoch 63/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.3002 - accuracy: 0.9024 - val_loss: 0.2853 - val_accuracy: 0.9231\n",
      "Epoch 64/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2726 - accuracy: 0.9111 - val_loss: 0.5262 - val_accuracy: 0.7692\n",
      "Epoch 65/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.3039 - accuracy: 0.8829 - val_loss: 0.5899 - val_accuracy: 0.7500\n",
      "Epoch 66/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.3352 - accuracy: 0.8633 - val_loss: 0.3472 - val_accuracy: 0.8846\n",
      "Epoch 67/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2989 - accuracy: 0.8894 - val_loss: 0.3975 - val_accuracy: 0.8462\n",
      "Epoch 68/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.3154 - accuracy: 0.8829 - val_loss: 0.3698 - val_accuracy: 0.8462\n",
      "Epoch 69/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2857 - accuracy: 0.8980 - val_loss: 0.4651 - val_accuracy: 0.8077\n",
      "Epoch 70/500\n",
      "461/461 [==============================] - 0s 100us/step - loss: 0.3008 - accuracy: 0.8807 - val_loss: 0.3822 - val_accuracy: 0.8462\n",
      "Epoch 71/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2958 - accuracy: 0.8915 - val_loss: 0.6153 - val_accuracy: 0.7692\n",
      "Epoch 72/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2980 - accuracy: 0.8937 - val_loss: 0.4541 - val_accuracy: 0.8462\n",
      "Epoch 73/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.3784 - accuracy: 0.8416 - val_loss: 0.2858 - val_accuracy: 0.9038\n",
      "Epoch 74/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2905 - accuracy: 0.8959 - val_loss: 0.5174 - val_accuracy: 0.7885\n",
      "Epoch 75/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2882 - accuracy: 0.8850 - val_loss: 0.2749 - val_accuracy: 0.9038\n",
      "Epoch 76/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2996 - accuracy: 0.8850 - val_loss: 0.3283 - val_accuracy: 0.8846\n",
      "Epoch 77/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2873 - accuracy: 0.9024 - val_loss: 0.3394 - val_accuracy: 0.8846\n",
      "Epoch 78/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2583 - accuracy: 0.9111 - val_loss: 0.5007 - val_accuracy: 0.7885\n",
      "Epoch 79/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2824 - accuracy: 0.8937 - val_loss: 0.3328 - val_accuracy: 0.8846\n",
      "Epoch 80/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2795 - accuracy: 0.9002 - val_loss: 0.3149 - val_accuracy: 0.8846\n",
      "Epoch 81/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2656 - accuracy: 0.9111 - val_loss: 0.2680 - val_accuracy: 0.9231\n",
      "Epoch 82/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2743 - accuracy: 0.8937 - val_loss: 0.2696 - val_accuracy: 0.8654\n",
      "Epoch 83/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2878 - accuracy: 0.9002 - val_loss: 0.5714 - val_accuracy: 0.7692\n",
      "Epoch 84/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.2619 - accuracy: 0.9024 - val_loss: 0.2676 - val_accuracy: 0.8846\n",
      "Epoch 85/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.2351 - accuracy: 0.9306 - val_loss: 0.2945 - val_accuracy: 0.8654\n",
      "Epoch 86/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2706 - accuracy: 0.9067 - val_loss: 0.3797 - val_accuracy: 0.8462\n",
      "Epoch 87/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.2881 - accuracy: 0.9002 - val_loss: 0.2611 - val_accuracy: 0.9038\n",
      "Epoch 88/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2696 - accuracy: 0.8980 - val_loss: 0.2608 - val_accuracy: 0.9231\n",
      "Epoch 89/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2824 - accuracy: 0.8937 - val_loss: 0.2575 - val_accuracy: 0.9231\n",
      "Epoch 90/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.3030 - accuracy: 0.8764 - val_loss: 0.2953 - val_accuracy: 0.8654\n",
      "Epoch 91/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2702 - accuracy: 0.8980 - val_loss: 0.2849 - val_accuracy: 0.9038\n",
      "Epoch 92/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2495 - accuracy: 0.9089 - val_loss: 0.2681 - val_accuracy: 0.8654\n",
      "Epoch 93/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2472 - accuracy: 0.9067 - val_loss: 0.3821 - val_accuracy: 0.8654\n",
      "Epoch 94/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2377 - accuracy: 0.9154 - val_loss: 0.3944 - val_accuracy: 0.8462\n",
      "Epoch 95/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2537 - accuracy: 0.9024 - val_loss: 0.2509 - val_accuracy: 0.9231\n",
      "Epoch 96/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2795 - accuracy: 0.8937 - val_loss: 0.2700 - val_accuracy: 0.8654\n",
      "Epoch 97/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2666 - accuracy: 0.8937 - val_loss: 0.6397 - val_accuracy: 0.7500\n",
      "Epoch 98/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2512 - accuracy: 0.9046 - val_loss: 0.2632 - val_accuracy: 0.8846\n",
      "Epoch 99/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2427 - accuracy: 0.9046 - val_loss: 0.5946 - val_accuracy: 0.7692\n",
      "Epoch 100/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2597 - accuracy: 0.8980 - val_loss: 0.2464 - val_accuracy: 0.9231\n",
      "Epoch 101/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.2735 - accuracy: 0.8937 - val_loss: 0.2488 - val_accuracy: 0.9231\n",
      "Epoch 102/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2843 - accuracy: 0.8937 - val_loss: 0.3137 - val_accuracy: 0.8846\n",
      "Epoch 103/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2639 - accuracy: 0.9197 - val_loss: 0.3799 - val_accuracy: 0.8462\n",
      "Epoch 104/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2657 - accuracy: 0.9024 - val_loss: 0.2470 - val_accuracy: 0.9038\n",
      "Epoch 105/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2591 - accuracy: 0.8959 - val_loss: 0.2533 - val_accuracy: 0.8846\n",
      "Epoch 106/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2403 - accuracy: 0.9132 - val_loss: 0.2547 - val_accuracy: 0.9231\n",
      "Epoch 107/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2819 - accuracy: 0.8894 - val_loss: 0.3287 - val_accuracy: 0.8846\n",
      "Epoch 108/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2603 - accuracy: 0.9024 - val_loss: 0.2665 - val_accuracy: 0.8846\n",
      "Epoch 109/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2548 - accuracy: 0.9089 - val_loss: 0.3676 - val_accuracy: 0.8654\n",
      "Epoch 110/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2358 - accuracy: 0.9089 - val_loss: 0.2484 - val_accuracy: 0.9231\n",
      "Epoch 111/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2380 - accuracy: 0.9111 - val_loss: 0.2424 - val_accuracy: 0.9038\n",
      "Epoch 112/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2525 - accuracy: 0.9176 - val_loss: 0.3913 - val_accuracy: 0.8462\n",
      "Epoch 113/500\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "461/461 [==============================] - 0s 104us/step - loss: 0.2737 - accuracy: 0.8850 - val_loss: 0.2609 - val_accuracy: 0.8846\n",
      "Epoch 114/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2584 - accuracy: 0.9024 - val_loss: 0.7350 - val_accuracy: 0.6731\n",
      "Epoch 115/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2668 - accuracy: 0.9002 - val_loss: 0.2456 - val_accuracy: 0.9231\n",
      "Epoch 116/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2724 - accuracy: 0.8807 - val_loss: 0.2728 - val_accuracy: 0.9038\n",
      "Epoch 117/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2467 - accuracy: 0.9089 - val_loss: 0.3256 - val_accuracy: 0.8654\n",
      "Epoch 118/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2503 - accuracy: 0.9002 - val_loss: 0.2346 - val_accuracy: 0.9038\n",
      "Epoch 119/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2460 - accuracy: 0.9024 - val_loss: 0.2431 - val_accuracy: 0.8846\n",
      "Epoch 120/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2539 - accuracy: 0.8915 - val_loss: 0.3266 - val_accuracy: 0.8462\n",
      "Epoch 121/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2574 - accuracy: 0.9089 - val_loss: 0.2438 - val_accuracy: 0.9231\n",
      "Epoch 122/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2720 - accuracy: 0.8915 - val_loss: 0.2386 - val_accuracy: 0.9231\n",
      "Epoch 123/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2601 - accuracy: 0.8959 - val_loss: 0.2394 - val_accuracy: 0.8846\n",
      "Epoch 124/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2487 - accuracy: 0.9024 - val_loss: 0.2417 - val_accuracy: 0.9231\n",
      "Epoch 125/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2629 - accuracy: 0.8980 - val_loss: 0.3113 - val_accuracy: 0.8846\n",
      "Epoch 126/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2477 - accuracy: 0.9024 - val_loss: 0.2363 - val_accuracy: 0.8846\n",
      "Epoch 127/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2493 - accuracy: 0.9067 - val_loss: 0.2742 - val_accuracy: 0.8654\n",
      "Epoch 128/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2637 - accuracy: 0.8959 - val_loss: 0.2753 - val_accuracy: 0.8654\n",
      "Epoch 129/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2401 - accuracy: 0.9089 - val_loss: 0.2833 - val_accuracy: 0.8846\n",
      "Epoch 130/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2717 - accuracy: 0.8915 - val_loss: 0.2529 - val_accuracy: 0.8846\n",
      "Epoch 131/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2673 - accuracy: 0.9046 - val_loss: 0.3487 - val_accuracy: 0.8654\n",
      "Epoch 132/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2523 - accuracy: 0.9046 - val_loss: 0.2819 - val_accuracy: 0.8654\n",
      "Epoch 133/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2516 - accuracy: 0.9111 - val_loss: 0.2476 - val_accuracy: 0.8846\n",
      "Epoch 134/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2402 - accuracy: 0.9067 - val_loss: 0.2455 - val_accuracy: 0.8846\n",
      "Epoch 135/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2321 - accuracy: 0.9111 - val_loss: 0.2426 - val_accuracy: 0.9038\n",
      "Epoch 136/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2233 - accuracy: 0.9176 - val_loss: 0.2569 - val_accuracy: 0.8846\n",
      "Epoch 137/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2568 - accuracy: 0.8937 - val_loss: 0.4387 - val_accuracy: 0.8462\n",
      "Epoch 138/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2297 - accuracy: 0.9197 - val_loss: 0.2556 - val_accuracy: 0.8846\n",
      "Epoch 139/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2203 - accuracy: 0.9154 - val_loss: 0.2484 - val_accuracy: 0.8846\n",
      "Epoch 140/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2600 - accuracy: 0.8980 - val_loss: 0.3053 - val_accuracy: 0.8846\n",
      "Epoch 141/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2454 - accuracy: 0.9154 - val_loss: 0.2587 - val_accuracy: 0.8654\n",
      "Epoch 142/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2728 - accuracy: 0.8959 - val_loss: 0.4244 - val_accuracy: 0.8462\n",
      "Epoch 143/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2402 - accuracy: 0.9046 - val_loss: 0.4120 - val_accuracy: 0.8462\n",
      "Epoch 144/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2395 - accuracy: 0.8980 - val_loss: 0.2841 - val_accuracy: 0.8654\n",
      "Epoch 145/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2346 - accuracy: 0.9024 - val_loss: 0.4060 - val_accuracy: 0.8462\n",
      "Epoch 146/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2430 - accuracy: 0.9046 - val_loss: 0.2376 - val_accuracy: 0.8846\n",
      "Epoch 147/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2396 - accuracy: 0.9111 - val_loss: 0.3697 - val_accuracy: 0.8462\n",
      "Epoch 148/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2497 - accuracy: 0.9002 - val_loss: 0.3578 - val_accuracy: 0.8462\n",
      "Epoch 149/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2376 - accuracy: 0.9111 - val_loss: 0.2353 - val_accuracy: 0.8846\n",
      "Epoch 150/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2553 - accuracy: 0.9089 - val_loss: 0.6042 - val_accuracy: 0.7308\n",
      "Epoch 151/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2491 - accuracy: 0.8959 - val_loss: 0.4788 - val_accuracy: 0.7885\n",
      "Epoch 152/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2421 - accuracy: 0.9024 - val_loss: 0.4125 - val_accuracy: 0.8462\n",
      "Epoch 153/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2582 - accuracy: 0.9024 - val_loss: 0.8148 - val_accuracy: 0.6538\n",
      "Epoch 154/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2457 - accuracy: 0.8959 - val_loss: 0.2454 - val_accuracy: 0.8846\n",
      "Epoch 155/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2257 - accuracy: 0.9241 - val_loss: 0.3781 - val_accuracy: 0.8462\n",
      "Epoch 156/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2458 - accuracy: 0.9046 - val_loss: 0.2414 - val_accuracy: 0.9231\n",
      "Epoch 157/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2498 - accuracy: 0.8980 - val_loss: 0.3656 - val_accuracy: 0.8654\n",
      "Epoch 158/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2373 - accuracy: 0.9154 - val_loss: 0.2907 - val_accuracy: 0.8846\n",
      "Epoch 159/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2264 - accuracy: 0.9002 - val_loss: 0.2818 - val_accuracy: 0.8846\n",
      "Epoch 160/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2394 - accuracy: 0.9067 - val_loss: 0.2351 - val_accuracy: 0.8846\n",
      "Epoch 161/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2514 - accuracy: 0.8980 - val_loss: 0.2772 - val_accuracy: 0.8654\n",
      "Epoch 162/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2592 - accuracy: 0.9111 - val_loss: 0.2616 - val_accuracy: 0.8846\n",
      "Epoch 163/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2601 - accuracy: 0.8915 - val_loss: 0.2226 - val_accuracy: 0.8846\n",
      "Epoch 164/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2327 - accuracy: 0.9046 - val_loss: 0.2771 - val_accuracy: 0.8846\n",
      "Epoch 165/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2415 - accuracy: 0.9002 - val_loss: 0.3439 - val_accuracy: 0.8462\n",
      "Epoch 166/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2214 - accuracy: 0.9219 - val_loss: 0.3426 - val_accuracy: 0.8654\n",
      "Epoch 167/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2433 - accuracy: 0.9132 - val_loss: 0.2322 - val_accuracy: 0.8846\n",
      "Epoch 168/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2622 - accuracy: 0.8959 - val_loss: 0.2588 - val_accuracy: 0.8654\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 169/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2461 - accuracy: 0.9132 - val_loss: 0.2944 - val_accuracy: 0.8846\n",
      "Epoch 170/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2450 - accuracy: 0.8959 - val_loss: 0.3179 - val_accuracy: 0.8846\n",
      "Epoch 171/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2252 - accuracy: 0.9176 - val_loss: 0.2827 - val_accuracy: 0.8846\n",
      "Epoch 172/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2273 - accuracy: 0.9111 - val_loss: 0.3274 - val_accuracy: 0.8846\n",
      "Epoch 173/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2390 - accuracy: 0.9111 - val_loss: 0.2362 - val_accuracy: 0.9231\n",
      "Epoch 174/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2276 - accuracy: 0.9067 - val_loss: 0.2955 - val_accuracy: 0.8846\n",
      "Epoch 175/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2300 - accuracy: 0.9197 - val_loss: 0.3857 - val_accuracy: 0.8462\n",
      "Epoch 176/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2392 - accuracy: 0.9089 - val_loss: 0.2955 - val_accuracy: 0.8846\n",
      "Epoch 177/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2597 - accuracy: 0.9002 - val_loss: 0.2506 - val_accuracy: 0.8846\n",
      "Epoch 178/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2246 - accuracy: 0.8937 - val_loss: 0.4144 - val_accuracy: 0.8462\n",
      "Epoch 179/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2536 - accuracy: 0.9046 - val_loss: 0.2297 - val_accuracy: 0.8846\n",
      "Epoch 180/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2578 - accuracy: 0.9067 - val_loss: 0.2823 - val_accuracy: 0.8654\n",
      "Epoch 181/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2393 - accuracy: 0.9024 - val_loss: 0.3520 - val_accuracy: 0.8462\n",
      "Epoch 182/500\n",
      "461/461 [==============================] - 0s 114us/step - loss: 0.2434 - accuracy: 0.9067 - val_loss: 0.2370 - val_accuracy: 0.8846\n",
      "Epoch 183/500\n",
      "461/461 [==============================] - 0s 109us/step - loss: 0.2282 - accuracy: 0.9046 - val_loss: 0.2589 - val_accuracy: 0.8654\n",
      "Epoch 184/500\n",
      "461/461 [==============================] - 0s 114us/step - loss: 0.1980 - accuracy: 0.9197 - val_loss: 0.2839 - val_accuracy: 0.8846\n",
      "Epoch 185/500\n",
      "461/461 [==============================] - 0s 132us/step - loss: 0.2692 - accuracy: 0.8915 - val_loss: 0.2573 - val_accuracy: 0.8654\n",
      "Epoch 186/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.2026 - accuracy: 0.9197 - val_loss: 0.2393 - val_accuracy: 0.8846\n",
      "Epoch 187/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2358 - accuracy: 0.9111 - val_loss: 0.2470 - val_accuracy: 0.8654\n",
      "Epoch 188/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2244 - accuracy: 0.9002 - val_loss: 0.2221 - val_accuracy: 0.9038\n",
      "Epoch 189/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2224 - accuracy: 0.9111 - val_loss: 0.2346 - val_accuracy: 0.8846\n",
      "Epoch 190/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2515 - accuracy: 0.9132 - val_loss: 0.2726 - val_accuracy: 0.8654\n",
      "Epoch 191/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2445 - accuracy: 0.9132 - val_loss: 0.2261 - val_accuracy: 0.9038\n",
      "Epoch 192/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2078 - accuracy: 0.9132 - val_loss: 0.3158 - val_accuracy: 0.8846\n",
      "Epoch 193/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2225 - accuracy: 0.9089 - val_loss: 0.2399 - val_accuracy: 0.8846\n",
      "Epoch 194/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2248 - accuracy: 0.9154 - val_loss: 0.3415 - val_accuracy: 0.8846\n",
      "Epoch 195/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2280 - accuracy: 0.9197 - val_loss: 0.2244 - val_accuracy: 0.9038\n",
      "Epoch 196/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2638 - accuracy: 0.8894 - val_loss: 0.2369 - val_accuracy: 0.8846\n",
      "Epoch 197/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2332 - accuracy: 0.9154 - val_loss: 0.2346 - val_accuracy: 0.8846\n",
      "Epoch 198/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2536 - accuracy: 0.9002 - val_loss: 0.2705 - val_accuracy: 0.8654\n",
      "Epoch 199/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2310 - accuracy: 0.9067 - val_loss: 0.2456 - val_accuracy: 0.8654\n",
      "Epoch 200/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2543 - accuracy: 0.9154 - val_loss: 0.3276 - val_accuracy: 0.8654\n",
      "Epoch 201/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2145 - accuracy: 0.9176 - val_loss: 0.2466 - val_accuracy: 0.8654\n",
      "Epoch 202/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2168 - accuracy: 0.9132 - val_loss: 0.2225 - val_accuracy: 0.8846\n",
      "Epoch 203/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2164 - accuracy: 0.9241 - val_loss: 0.4280 - val_accuracy: 0.8462\n",
      "Epoch 204/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2312 - accuracy: 0.9046 - val_loss: 0.2401 - val_accuracy: 0.9231\n",
      "Epoch 205/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2256 - accuracy: 0.9241 - val_loss: 0.3728 - val_accuracy: 0.8462\n",
      "Epoch 206/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2041 - accuracy: 0.9176 - val_loss: 0.2528 - val_accuracy: 0.8654\n",
      "Epoch 207/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2137 - accuracy: 0.9176 - val_loss: 0.3277 - val_accuracy: 0.8846\n",
      "Epoch 208/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2305 - accuracy: 0.9067 - val_loss: 0.2617 - val_accuracy: 0.8654\n",
      "Epoch 209/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2265 - accuracy: 0.9132 - val_loss: 0.2541 - val_accuracy: 0.8654\n",
      "Epoch 210/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2151 - accuracy: 0.9154 - val_loss: 0.3472 - val_accuracy: 0.8654\n",
      "Epoch 211/500\n",
      "461/461 [==============================] - 0s 110us/step - loss: 0.2177 - accuracy: 0.9197 - val_loss: 0.3056 - val_accuracy: 0.8846\n",
      "Epoch 212/500\n",
      "461/461 [==============================] - 0s 128us/step - loss: 0.2215 - accuracy: 0.9154 - val_loss: 0.2272 - val_accuracy: 0.8654\n",
      "Epoch 213/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2548 - accuracy: 0.8937 - val_loss: 0.2682 - val_accuracy: 0.8846\n",
      "Epoch 214/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2130 - accuracy: 0.9262 - val_loss: 0.2561 - val_accuracy: 0.8654\n",
      "Epoch 215/500\n",
      "461/461 [==============================] - 0s 115us/step - loss: 0.2351 - accuracy: 0.9154 - val_loss: 0.2310 - val_accuracy: 0.8846\n",
      "Epoch 216/500\n",
      "461/461 [==============================] - 0s 111us/step - loss: 0.2125 - accuracy: 0.9154 - val_loss: 0.3809 - val_accuracy: 0.8462\n",
      "Epoch 217/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2116 - accuracy: 0.9371 - val_loss: 0.2577 - val_accuracy: 0.8654\n",
      "Epoch 218/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2180 - accuracy: 0.9219 - val_loss: 0.2586 - val_accuracy: 0.8654\n",
      "Epoch 219/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2164 - accuracy: 0.9176 - val_loss: 0.2522 - val_accuracy: 0.8654\n",
      "Epoch 220/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2455 - accuracy: 0.9154 - val_loss: 0.3010 - val_accuracy: 0.8846\n",
      "Epoch 221/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2386 - accuracy: 0.9089 - val_loss: 0.3975 - val_accuracy: 0.8462\n",
      "Epoch 222/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2512 - accuracy: 0.8937 - val_loss: 0.2600 - val_accuracy: 0.8654\n",
      "Epoch 223/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2610 - accuracy: 0.8980 - val_loss: 0.2364 - val_accuracy: 0.8654\n",
      "Epoch 224/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2333 - accuracy: 0.9024 - val_loss: 0.2240 - val_accuracy: 0.9231\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 225/500\n",
      "461/461 [==============================] - 0s 109us/step - loss: 0.2563 - accuracy: 0.8980 - val_loss: 0.2540 - val_accuracy: 0.8654\n",
      "Epoch 226/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2429 - accuracy: 0.9197 - val_loss: 0.3871 - val_accuracy: 0.8462\n",
      "Epoch 227/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.2365 - accuracy: 0.9089 - val_loss: 0.2213 - val_accuracy: 0.8846\n",
      "Epoch 228/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.2435 - accuracy: 0.9111 - val_loss: 0.2407 - val_accuracy: 0.8846\n",
      "Epoch 229/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2068 - accuracy: 0.9284 - val_loss: 0.3512 - val_accuracy: 0.8846\n",
      "Epoch 230/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2216 - accuracy: 0.9197 - val_loss: 0.2724 - val_accuracy: 0.8654\n",
      "Epoch 231/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2168 - accuracy: 0.9002 - val_loss: 0.2858 - val_accuracy: 0.8846\n",
      "Epoch 232/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2179 - accuracy: 0.9219 - val_loss: 0.3161 - val_accuracy: 0.8654\n",
      "Epoch 233/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2512 - accuracy: 0.8959 - val_loss: 0.2262 - val_accuracy: 0.9038\n",
      "Epoch 234/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2123 - accuracy: 0.9089 - val_loss: 0.2259 - val_accuracy: 0.8846\n",
      "Epoch 235/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2249 - accuracy: 0.9132 - val_loss: 0.3071 - val_accuracy: 0.8846\n",
      "Epoch 236/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2119 - accuracy: 0.9067 - val_loss: 0.2235 - val_accuracy: 0.8846\n",
      "Epoch 237/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2299 - accuracy: 0.9197 - val_loss: 0.2218 - val_accuracy: 0.9038\n",
      "Epoch 238/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2312 - accuracy: 0.8980 - val_loss: 0.3168 - val_accuracy: 0.8654\n",
      "Epoch 239/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2060 - accuracy: 0.9111 - val_loss: 0.2697 - val_accuracy: 0.8846\n",
      "Epoch 240/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2189 - accuracy: 0.9176 - val_loss: 0.2383 - val_accuracy: 0.8846\n",
      "Epoch 241/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2335 - accuracy: 0.8959 - val_loss: 0.4557 - val_accuracy: 0.8462\n",
      "Epoch 242/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2352 - accuracy: 0.9067 - val_loss: 0.2233 - val_accuracy: 0.8846\n",
      "Epoch 243/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2406 - accuracy: 0.9067 - val_loss: 0.2262 - val_accuracy: 0.8846\n",
      "Epoch 244/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2176 - accuracy: 0.9197 - val_loss: 0.2970 - val_accuracy: 0.8846\n",
      "Epoch 245/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2079 - accuracy: 0.9111 - val_loss: 0.2278 - val_accuracy: 0.8846\n",
      "Epoch 246/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2235 - accuracy: 0.9197 - val_loss: 0.2209 - val_accuracy: 0.9038\n",
      "Epoch 247/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2177 - accuracy: 0.9176 - val_loss: 0.2549 - val_accuracy: 0.8846\n",
      "Epoch 248/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2440 - accuracy: 0.9089 - val_loss: 0.3025 - val_accuracy: 0.8654\n",
      "Epoch 249/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2219 - accuracy: 0.9089 - val_loss: 0.2221 - val_accuracy: 0.8846\n",
      "Epoch 250/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1985 - accuracy: 0.9219 - val_loss: 0.6683 - val_accuracy: 0.7692\n",
      "Epoch 251/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2486 - accuracy: 0.9002 - val_loss: 0.2364 - val_accuracy: 0.8654\n",
      "Epoch 252/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2222 - accuracy: 0.9132 - val_loss: 0.2188 - val_accuracy: 0.9231\n",
      "Epoch 253/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2249 - accuracy: 0.9067 - val_loss: 0.2140 - val_accuracy: 0.9231\n",
      "Epoch 254/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2200 - accuracy: 0.9219 - val_loss: 0.2169 - val_accuracy: 0.9231\n",
      "Epoch 255/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2272 - accuracy: 0.9132 - val_loss: 0.2537 - val_accuracy: 0.8846\n",
      "Epoch 256/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2545 - accuracy: 0.9024 - val_loss: 0.2270 - val_accuracy: 0.9038\n",
      "Epoch 257/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2237 - accuracy: 0.9154 - val_loss: 0.2421 - val_accuracy: 0.8846\n",
      "Epoch 258/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2103 - accuracy: 0.9219 - val_loss: 0.2111 - val_accuracy: 0.9038\n",
      "Epoch 259/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2357 - accuracy: 0.9154 - val_loss: 0.2962 - val_accuracy: 0.8654\n",
      "Epoch 260/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2132 - accuracy: 0.9241 - val_loss: 0.2649 - val_accuracy: 0.8846\n",
      "Epoch 261/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2171 - accuracy: 0.9089 - val_loss: 0.4504 - val_accuracy: 0.8462\n",
      "Epoch 262/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2231 - accuracy: 0.9176 - val_loss: 0.2354 - val_accuracy: 0.8846\n",
      "Epoch 263/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2099 - accuracy: 0.9089 - val_loss: 0.2336 - val_accuracy: 0.8846\n",
      "Epoch 264/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2463 - accuracy: 0.9067 - val_loss: 0.2209 - val_accuracy: 0.9038\n",
      "Epoch 265/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2413 - accuracy: 0.9111 - val_loss: 0.2612 - val_accuracy: 0.8654\n",
      "Epoch 266/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2377 - accuracy: 0.9089 - val_loss: 0.2281 - val_accuracy: 0.8846\n",
      "Epoch 267/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2279 - accuracy: 0.9154 - val_loss: 0.2234 - val_accuracy: 0.9038\n",
      "Epoch 268/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2241 - accuracy: 0.9067 - val_loss: 0.2709 - val_accuracy: 0.8654\n",
      "Epoch 269/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2201 - accuracy: 0.9219 - val_loss: 0.2307 - val_accuracy: 0.8846\n",
      "Epoch 270/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2281 - accuracy: 0.9089 - val_loss: 0.2823 - val_accuracy: 0.8846\n",
      "Epoch 271/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2202 - accuracy: 0.9067 - val_loss: 0.2254 - val_accuracy: 0.9038\n",
      "Epoch 272/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2152 - accuracy: 0.9241 - val_loss: 0.2453 - val_accuracy: 0.8654\n",
      "Epoch 273/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2024 - accuracy: 0.9262 - val_loss: 0.2286 - val_accuracy: 0.9231\n",
      "Epoch 274/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2053 - accuracy: 0.9262 - val_loss: 0.3311 - val_accuracy: 0.8846\n",
      "Epoch 275/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2077 - accuracy: 0.9219 - val_loss: 0.3103 - val_accuracy: 0.8846\n",
      "Epoch 276/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2351 - accuracy: 0.9046 - val_loss: 0.2523 - val_accuracy: 0.8654\n",
      "Epoch 277/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1962 - accuracy: 0.9176 - val_loss: 0.2205 - val_accuracy: 0.8846\n",
      "Epoch 278/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2306 - accuracy: 0.9002 - val_loss: 0.2170 - val_accuracy: 0.9231\n",
      "Epoch 279/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2162 - accuracy: 0.9241 - val_loss: 0.2787 - val_accuracy: 0.8846\n",
      "Epoch 280/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2071 - accuracy: 0.9176 - val_loss: 0.2962 - val_accuracy: 0.8654\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 281/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2224 - accuracy: 0.9349 - val_loss: 0.2362 - val_accuracy: 0.9231\n",
      "Epoch 282/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2169 - accuracy: 0.9111 - val_loss: 0.2761 - val_accuracy: 0.8654\n",
      "Epoch 283/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2230 - accuracy: 0.9132 - val_loss: 0.2524 - val_accuracy: 0.8846\n",
      "Epoch 284/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2175 - accuracy: 0.9154 - val_loss: 0.2258 - val_accuracy: 0.9038\n",
      "Epoch 285/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2229 - accuracy: 0.9089 - val_loss: 0.2522 - val_accuracy: 0.8654\n",
      "Epoch 286/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2187 - accuracy: 0.9132 - val_loss: 0.2620 - val_accuracy: 0.8846\n",
      "Epoch 287/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2351 - accuracy: 0.9132 - val_loss: 0.2254 - val_accuracy: 0.9038\n",
      "Epoch 288/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2063 - accuracy: 0.9197 - val_loss: 0.2164 - val_accuracy: 0.9038\n",
      "Epoch 289/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2245 - accuracy: 0.9067 - val_loss: 0.2308 - val_accuracy: 0.9038\n",
      "Epoch 290/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2242 - accuracy: 0.9132 - val_loss: 0.2631 - val_accuracy: 0.8846\n",
      "Epoch 291/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2132 - accuracy: 0.9132 - val_loss: 0.2206 - val_accuracy: 0.8846\n",
      "Epoch 292/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2112 - accuracy: 0.9262 - val_loss: 0.2254 - val_accuracy: 0.9038\n",
      "Epoch 293/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2129 - accuracy: 0.9176 - val_loss: 0.3606 - val_accuracy: 0.8462\n",
      "Epoch 294/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2363 - accuracy: 0.9046 - val_loss: 0.2481 - val_accuracy: 0.8846\n",
      "Epoch 295/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1999 - accuracy: 0.9176 - val_loss: 0.2320 - val_accuracy: 0.8846\n",
      "Epoch 296/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.2188 - accuracy: 0.9067 - val_loss: 0.3099 - val_accuracy: 0.8654\n",
      "Epoch 297/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2181 - accuracy: 0.9111 - val_loss: 0.2804 - val_accuracy: 0.8846\n",
      "Epoch 298/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.2138 - accuracy: 0.9241 - val_loss: 0.2211 - val_accuracy: 0.8846\n",
      "Epoch 299/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.1976 - accuracy: 0.9306 - val_loss: 0.2182 - val_accuracy: 0.8846\n",
      "Epoch 300/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2040 - accuracy: 0.9197 - val_loss: 0.2167 - val_accuracy: 0.8846\n",
      "Epoch 301/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2243 - accuracy: 0.9197 - val_loss: 0.2462 - val_accuracy: 0.8846\n",
      "Epoch 302/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2042 - accuracy: 0.9176 - val_loss: 0.2447 - val_accuracy: 0.8654\n",
      "Epoch 303/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2180 - accuracy: 0.9176 - val_loss: 0.2222 - val_accuracy: 0.9231\n",
      "Epoch 304/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2168 - accuracy: 0.9111 - val_loss: 0.2947 - val_accuracy: 0.8846\n",
      "Epoch 305/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2209 - accuracy: 0.9176 - val_loss: 0.3768 - val_accuracy: 0.8462\n",
      "Epoch 306/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.1988 - accuracy: 0.9176 - val_loss: 0.2796 - val_accuracy: 0.8846\n",
      "Epoch 307/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2012 - accuracy: 0.9284 - val_loss: 0.2505 - val_accuracy: 0.8654\n",
      "Epoch 308/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2044 - accuracy: 0.9219 - val_loss: 0.2159 - val_accuracy: 0.9038\n",
      "Epoch 309/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2386 - accuracy: 0.9046 - val_loss: 0.3397 - val_accuracy: 0.8654\n",
      "Epoch 310/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.2183 - accuracy: 0.9197 - val_loss: 0.2132 - val_accuracy: 0.9038\n",
      "Epoch 311/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2243 - accuracy: 0.9067 - val_loss: 0.2488 - val_accuracy: 0.8654\n",
      "Epoch 312/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.2075 - accuracy: 0.9067 - val_loss: 0.2666 - val_accuracy: 0.8846\n",
      "Epoch 313/500\n",
      "461/461 [==============================] - 0s 109us/step - loss: 0.2005 - accuracy: 0.9176 - val_loss: 0.2104 - val_accuracy: 0.9038\n",
      "Epoch 314/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.2229 - accuracy: 0.9067 - val_loss: 0.3578 - val_accuracy: 0.8462\n",
      "Epoch 315/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.1891 - accuracy: 0.9262 - val_loss: 0.2641 - val_accuracy: 0.9231\n",
      "Epoch 316/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2328 - accuracy: 0.9154 - val_loss: 0.2182 - val_accuracy: 0.8846\n",
      "Epoch 317/500\n",
      "461/461 [==============================] - 0s 109us/step - loss: 0.2310 - accuracy: 0.9176 - val_loss: 0.2368 - val_accuracy: 0.8846\n",
      "Epoch 318/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2295 - accuracy: 0.8980 - val_loss: 0.2331 - val_accuracy: 0.8846\n",
      "Epoch 319/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.2030 - accuracy: 0.9089 - val_loss: 0.2126 - val_accuracy: 0.9038\n",
      "Epoch 320/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2046 - accuracy: 0.9219 - val_loss: 0.2175 - val_accuracy: 0.8846\n",
      "Epoch 321/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2040 - accuracy: 0.9262 - val_loss: 0.2207 - val_accuracy: 0.9038\n",
      "Epoch 322/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2192 - accuracy: 0.9046 - val_loss: 0.2249 - val_accuracy: 0.8846\n",
      "Epoch 323/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2111 - accuracy: 0.9176 - val_loss: 0.2512 - val_accuracy: 0.8654\n",
      "Epoch 324/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2072 - accuracy: 0.9197 - val_loss: 0.2276 - val_accuracy: 0.8846\n",
      "Epoch 325/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2164 - accuracy: 0.9132 - val_loss: 0.2191 - val_accuracy: 0.9038\n",
      "Epoch 326/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2091 - accuracy: 0.9284 - val_loss: 0.2375 - val_accuracy: 0.8846\n",
      "Epoch 327/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2192 - accuracy: 0.9067 - val_loss: 0.2205 - val_accuracy: 0.8846\n",
      "Epoch 328/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2011 - accuracy: 0.9197 - val_loss: 0.2252 - val_accuracy: 0.8846\n",
      "Epoch 329/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2178 - accuracy: 0.9067 - val_loss: 0.2220 - val_accuracy: 0.8846\n",
      "Epoch 330/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.1898 - accuracy: 0.9241 - val_loss: 0.2217 - val_accuracy: 0.9038\n",
      "Epoch 331/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2246 - accuracy: 0.9241 - val_loss: 0.2248 - val_accuracy: 0.9038\n",
      "Epoch 332/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2155 - accuracy: 0.9154 - val_loss: 0.4089 - val_accuracy: 0.8462\n",
      "Epoch 333/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2197 - accuracy: 0.9176 - val_loss: 0.2268 - val_accuracy: 0.9038\n",
      "Epoch 334/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2062 - accuracy: 0.9111 - val_loss: 0.2827 - val_accuracy: 0.8846\n",
      "Epoch 335/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2001 - accuracy: 0.9197 - val_loss: 0.2235 - val_accuracy: 0.8846\n",
      "Epoch 336/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2112 - accuracy: 0.9089 - val_loss: 0.2295 - val_accuracy: 0.9231\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 337/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2010 - accuracy: 0.9241 - val_loss: 0.2453 - val_accuracy: 0.8654\n",
      "Epoch 338/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2082 - accuracy: 0.9111 - val_loss: 0.2434 - val_accuracy: 0.8654\n",
      "Epoch 339/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2300 - accuracy: 0.9154 - val_loss: 0.2303 - val_accuracy: 0.8846\n",
      "Epoch 340/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2009 - accuracy: 0.9197 - val_loss: 0.2572 - val_accuracy: 0.8654\n",
      "Epoch 341/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2027 - accuracy: 0.9111 - val_loss: 0.3068 - val_accuracy: 0.8846\n",
      "Epoch 342/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2233 - accuracy: 0.9176 - val_loss: 0.2735 - val_accuracy: 0.8846\n",
      "Epoch 343/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2042 - accuracy: 0.9132 - val_loss: 0.2450 - val_accuracy: 0.8846\n",
      "Epoch 344/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2065 - accuracy: 0.9111 - val_loss: 0.2150 - val_accuracy: 0.8846\n",
      "Epoch 345/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2261 - accuracy: 0.9219 - val_loss: 0.2329 - val_accuracy: 0.8846\n",
      "Epoch 346/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.1965 - accuracy: 0.9154 - val_loss: 0.2295 - val_accuracy: 0.8846\n",
      "Epoch 347/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2062 - accuracy: 0.9111 - val_loss: 0.2104 - val_accuracy: 0.8846\n",
      "Epoch 348/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2250 - accuracy: 0.9067 - val_loss: 0.2217 - val_accuracy: 0.9038\n",
      "Epoch 349/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2255 - accuracy: 0.9154 - val_loss: 0.2141 - val_accuracy: 0.8846\n",
      "Epoch 350/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2241 - accuracy: 0.9111 - val_loss: 0.2581 - val_accuracy: 0.8654\n",
      "Epoch 351/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2143 - accuracy: 0.9132 - val_loss: 0.2222 - val_accuracy: 0.9038\n",
      "Epoch 352/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.1982 - accuracy: 0.9132 - val_loss: 0.2647 - val_accuracy: 0.8654\n",
      "Epoch 353/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.1865 - accuracy: 0.9284 - val_loss: 0.2287 - val_accuracy: 0.8846\n",
      "Epoch 354/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2206 - accuracy: 0.9089 - val_loss: 0.2289 - val_accuracy: 0.8846\n",
      "Epoch 355/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2267 - accuracy: 0.9067 - val_loss: 0.2212 - val_accuracy: 0.8846\n",
      "Epoch 356/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2088 - accuracy: 0.9219 - val_loss: 0.2162 - val_accuracy: 0.9038\n",
      "Epoch 357/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2127 - accuracy: 0.9111 - val_loss: 0.2153 - val_accuracy: 0.9231\n",
      "Epoch 358/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.1909 - accuracy: 0.9219 - val_loss: 0.2683 - val_accuracy: 0.8846\n",
      "Epoch 359/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2186 - accuracy: 0.9046 - val_loss: 0.2117 - val_accuracy: 0.9038\n",
      "Epoch 360/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1981 - accuracy: 0.9219 - val_loss: 0.2617 - val_accuracy: 0.8654\n",
      "Epoch 361/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1996 - accuracy: 0.9219 - val_loss: 0.3754 - val_accuracy: 0.8462\n",
      "Epoch 362/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1954 - accuracy: 0.9262 - val_loss: 0.7169 - val_accuracy: 0.7308\n",
      "Epoch 363/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2113 - accuracy: 0.9241 - val_loss: 0.2195 - val_accuracy: 0.9038\n",
      "Epoch 364/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2129 - accuracy: 0.9132 - val_loss: 0.2565 - val_accuracy: 0.8846\n",
      "Epoch 365/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1871 - accuracy: 0.9154 - val_loss: 0.2458 - val_accuracy: 0.8846\n",
      "Epoch 366/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2195 - accuracy: 0.9241 - val_loss: 0.3244 - val_accuracy: 0.8654\n",
      "Epoch 367/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2266 - accuracy: 0.9067 - val_loss: 0.3006 - val_accuracy: 0.8654\n",
      "Epoch 368/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.1980 - accuracy: 0.9154 - val_loss: 0.2190 - val_accuracy: 0.9038\n",
      "Epoch 369/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.1963 - accuracy: 0.9349 - val_loss: 0.2389 - val_accuracy: 0.8846\n",
      "Epoch 370/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2296 - accuracy: 0.9111 - val_loss: 0.2321 - val_accuracy: 0.8846\n",
      "Epoch 371/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2020 - accuracy: 0.9262 - val_loss: 0.2112 - val_accuracy: 0.9038\n",
      "Epoch 372/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2059 - accuracy: 0.9132 - val_loss: 0.2098 - val_accuracy: 0.9038\n",
      "Epoch 373/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1981 - accuracy: 0.9241 - val_loss: 0.2096 - val_accuracy: 0.9038\n",
      "Epoch 374/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2119 - accuracy: 0.9111 - val_loss: 0.2292 - val_accuracy: 0.9038\n",
      "Epoch 375/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2069 - accuracy: 0.9111 - val_loss: 0.2516 - val_accuracy: 0.8654\n",
      "Epoch 376/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2257 - accuracy: 0.9111 - val_loss: 0.2503 - val_accuracy: 0.8654\n",
      "Epoch 377/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2094 - accuracy: 0.9111 - val_loss: 0.4505 - val_accuracy: 0.8462\n",
      "Epoch 378/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2439 - accuracy: 0.8980 - val_loss: 0.2393 - val_accuracy: 0.8846\n",
      "Epoch 379/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2324 - accuracy: 0.9132 - val_loss: 0.2244 - val_accuracy: 0.9038\n",
      "Epoch 380/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2300 - accuracy: 0.9197 - val_loss: 0.2433 - val_accuracy: 0.9038\n",
      "Epoch 381/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2320 - accuracy: 0.9046 - val_loss: 0.2190 - val_accuracy: 0.9038\n",
      "Epoch 382/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2038 - accuracy: 0.9241 - val_loss: 0.2068 - val_accuracy: 0.9038\n",
      "Epoch 383/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2282 - accuracy: 0.9176 - val_loss: 0.2908 - val_accuracy: 0.8654\n",
      "Epoch 384/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.1861 - accuracy: 0.9176 - val_loss: 0.2152 - val_accuracy: 0.9038\n",
      "Epoch 385/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2060 - accuracy: 0.9197 - val_loss: 0.2650 - val_accuracy: 0.8654\n",
      "Epoch 386/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2073 - accuracy: 0.9154 - val_loss: 0.2775 - val_accuracy: 0.8846\n",
      "Epoch 387/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2079 - accuracy: 0.9089 - val_loss: 0.2180 - val_accuracy: 0.9038\n",
      "Epoch 388/500\n",
      "461/461 [==============================] - 0s 133us/step - loss: 0.2038 - accuracy: 0.9154 - val_loss: 0.2128 - val_accuracy: 0.9038\n",
      "Epoch 389/500\n",
      "461/461 [==============================] - 0s 116us/step - loss: 0.2012 - accuracy: 0.9197 - val_loss: 0.2155 - val_accuracy: 0.9038\n",
      "Epoch 390/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2271 - accuracy: 0.9046 - val_loss: 0.2394 - val_accuracy: 0.8846\n",
      "Epoch 391/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.2065 - accuracy: 0.9219 - val_loss: 0.2430 - val_accuracy: 0.8846\n",
      "Epoch 392/500\n",
      "461/461 [==============================] - 0s 109us/step - loss: 0.2120 - accuracy: 0.9262 - val_loss: 0.4013 - val_accuracy: 0.8462\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 393/500\n",
      "461/461 [==============================] - 0s 110us/step - loss: 0.2119 - accuracy: 0.9089 - val_loss: 0.2334 - val_accuracy: 0.8846\n",
      "Epoch 394/500\n",
      "461/461 [==============================] - 0s 148us/step - loss: 0.2305 - accuracy: 0.9024 - val_loss: 0.2677 - val_accuracy: 0.8846\n",
      "Epoch 395/500\n",
      "461/461 [==============================] - 0s 145us/step - loss: 0.2116 - accuracy: 0.9067 - val_loss: 0.2147 - val_accuracy: 0.9038\n",
      "Epoch 396/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.1897 - accuracy: 0.9284 - val_loss: 0.2146 - val_accuracy: 0.9231\n",
      "Epoch 397/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.2193 - accuracy: 0.9132 - val_loss: 0.2384 - val_accuracy: 0.8846\n",
      "Epoch 398/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2203 - accuracy: 0.9132 - val_loss: 0.2240 - val_accuracy: 0.8846\n",
      "Epoch 399/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2080 - accuracy: 0.9089 - val_loss: 0.2179 - val_accuracy: 0.9038\n",
      "Epoch 400/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1974 - accuracy: 0.9349 - val_loss: 0.2273 - val_accuracy: 0.8846\n",
      "Epoch 401/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2102 - accuracy: 0.9067 - val_loss: 0.2366 - val_accuracy: 0.8846\n",
      "Epoch 402/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2120 - accuracy: 0.9111 - val_loss: 0.4013 - val_accuracy: 0.8462\n",
      "Epoch 403/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1985 - accuracy: 0.9219 - val_loss: 0.2084 - val_accuracy: 0.9038\n",
      "Epoch 404/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2316 - accuracy: 0.9046 - val_loss: 0.2497 - val_accuracy: 0.8654\n",
      "Epoch 405/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2199 - accuracy: 0.9132 - val_loss: 0.2434 - val_accuracy: 0.8846\n",
      "Epoch 406/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1922 - accuracy: 0.9219 - val_loss: 0.2244 - val_accuracy: 0.9038\n",
      "Epoch 407/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.1998 - accuracy: 0.9176 - val_loss: 0.2309 - val_accuracy: 0.8846\n",
      "Epoch 408/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.2253 - accuracy: 0.9024 - val_loss: 0.2947 - val_accuracy: 0.8846\n",
      "Epoch 409/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2172 - accuracy: 0.9046 - val_loss: 0.3170 - val_accuracy: 0.9038\n",
      "Epoch 410/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2274 - accuracy: 0.9067 - val_loss: 0.2536 - val_accuracy: 0.8654\n",
      "Epoch 411/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2172 - accuracy: 0.9111 - val_loss: 0.2206 - val_accuracy: 0.9038\n",
      "Epoch 412/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2013 - accuracy: 0.9262 - val_loss: 0.2182 - val_accuracy: 0.9231\n",
      "Epoch 413/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.2095 - accuracy: 0.9176 - val_loss: 0.2204 - val_accuracy: 0.9038\n",
      "Epoch 414/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.2062 - accuracy: 0.9306 - val_loss: 0.2435 - val_accuracy: 0.8846\n",
      "Epoch 415/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.1964 - accuracy: 0.9197 - val_loss: 0.2333 - val_accuracy: 0.8846\n",
      "Epoch 416/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.2109 - accuracy: 0.9219 - val_loss: 0.2208 - val_accuracy: 0.8846\n",
      "Epoch 417/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.2256 - accuracy: 0.9089 - val_loss: 0.2439 - val_accuracy: 0.8846\n",
      "Epoch 418/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1873 - accuracy: 0.9219 - val_loss: 0.2371 - val_accuracy: 0.8654\n",
      "Epoch 419/500\n",
      "461/461 [==============================] - 0s 108us/step - loss: 0.2147 - accuracy: 0.9176 - val_loss: 0.2397 - val_accuracy: 0.8654\n",
      "Epoch 420/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2041 - accuracy: 0.9154 - val_loss: 0.2343 - val_accuracy: 0.8846\n",
      "Epoch 421/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.1948 - accuracy: 0.9154 - val_loss: 0.2288 - val_accuracy: 0.8846\n",
      "Epoch 422/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2086 - accuracy: 0.9262 - val_loss: 0.2180 - val_accuracy: 0.9038\n",
      "Epoch 423/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.1952 - accuracy: 0.9262 - val_loss: 0.2228 - val_accuracy: 0.9038\n",
      "Epoch 424/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.1865 - accuracy: 0.9349 - val_loss: 0.2499 - val_accuracy: 0.8654\n",
      "Epoch 425/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.1995 - accuracy: 0.9219 - val_loss: 0.2180 - val_accuracy: 0.9038\n",
      "Epoch 426/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.1936 - accuracy: 0.9176 - val_loss: 0.2173 - val_accuracy: 0.9231\n",
      "Epoch 427/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2062 - accuracy: 0.9219 - val_loss: 0.2145 - val_accuracy: 0.9038\n",
      "Epoch 428/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2116 - accuracy: 0.9154 - val_loss: 0.2177 - val_accuracy: 0.9038\n",
      "Epoch 429/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2013 - accuracy: 0.9262 - val_loss: 0.2066 - val_accuracy: 0.9038\n",
      "Epoch 430/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2375 - accuracy: 0.9197 - val_loss: 0.2660 - val_accuracy: 0.8654\n",
      "Epoch 431/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.1871 - accuracy: 0.9306 - val_loss: 0.2307 - val_accuracy: 0.9038\n",
      "Epoch 432/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2044 - accuracy: 0.9284 - val_loss: 0.2415 - val_accuracy: 0.8846\n",
      "Epoch 433/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1985 - accuracy: 0.9241 - val_loss: 0.2412 - val_accuracy: 0.8846\n",
      "Epoch 434/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2390 - accuracy: 0.8980 - val_loss: 0.2317 - val_accuracy: 0.9038\n",
      "Epoch 435/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2012 - accuracy: 0.9197 - val_loss: 0.2099 - val_accuracy: 0.9038\n",
      "Epoch 436/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.1796 - accuracy: 0.9262 - val_loss: 0.2436 - val_accuracy: 0.8846\n",
      "Epoch 437/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2033 - accuracy: 0.9262 - val_loss: 0.2850 - val_accuracy: 0.8654\n",
      "Epoch 438/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2007 - accuracy: 0.9197 - val_loss: 0.2251 - val_accuracy: 0.8846\n",
      "Epoch 439/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2000 - accuracy: 0.9176 - val_loss: 0.3110 - val_accuracy: 0.8654\n",
      "Epoch 440/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2034 - accuracy: 0.9241 - val_loss: 0.2410 - val_accuracy: 0.8654\n",
      "Epoch 441/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2120 - accuracy: 0.9197 - val_loss: 0.2132 - val_accuracy: 0.9038\n",
      "Epoch 442/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2054 - accuracy: 0.9089 - val_loss: 0.2102 - val_accuracy: 0.9231\n",
      "Epoch 443/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2165 - accuracy: 0.9089 - val_loss: 0.2303 - val_accuracy: 0.9038\n",
      "Epoch 444/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2093 - accuracy: 0.9241 - val_loss: 0.2147 - val_accuracy: 0.9038\n",
      "Epoch 445/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2015 - accuracy: 0.9241 - val_loss: 0.2407 - val_accuracy: 0.8846\n",
      "Epoch 446/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2045 - accuracy: 0.9197 - val_loss: 0.2148 - val_accuracy: 0.9231\n",
      "Epoch 447/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2192 - accuracy: 0.9262 - val_loss: 0.2291 - val_accuracy: 0.9038\n",
      "Epoch 448/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2167 - accuracy: 0.9176 - val_loss: 0.2124 - val_accuracy: 0.9038\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 449/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.2076 - accuracy: 0.9284 - val_loss: 0.2351 - val_accuracy: 0.8846\n",
      "Epoch 450/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2061 - accuracy: 0.9241 - val_loss: 0.2211 - val_accuracy: 0.9038\n",
      "Epoch 451/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2051 - accuracy: 0.9219 - val_loss: 0.2213 - val_accuracy: 0.9038\n",
      "Epoch 452/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.1959 - accuracy: 0.9132 - val_loss: 0.2070 - val_accuracy: 0.9038\n",
      "Epoch 453/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2422 - accuracy: 0.9024 - val_loss: 0.2170 - val_accuracy: 0.9038\n",
      "Epoch 454/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2124 - accuracy: 0.9024 - val_loss: 0.2301 - val_accuracy: 0.9038\n",
      "Epoch 455/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1856 - accuracy: 0.9284 - val_loss: 0.2269 - val_accuracy: 0.9038\n",
      "Epoch 456/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1840 - accuracy: 0.9306 - val_loss: 0.2434 - val_accuracy: 0.8654\n",
      "Epoch 457/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1842 - accuracy: 0.9241 - val_loss: 0.3426 - val_accuracy: 0.8654\n",
      "Epoch 458/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2154 - accuracy: 0.9176 - val_loss: 0.2248 - val_accuracy: 0.9231\n",
      "Epoch 459/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1992 - accuracy: 0.9241 - val_loss: 0.2395 - val_accuracy: 0.8654\n",
      "Epoch 460/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2460 - accuracy: 0.9089 - val_loss: 0.2577 - val_accuracy: 0.8654\n",
      "Epoch 461/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2067 - accuracy: 0.9154 - val_loss: 0.2448 - val_accuracy: 0.8846\n",
      "Epoch 462/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.1940 - accuracy: 0.9306 - val_loss: 0.2177 - val_accuracy: 0.9038\n",
      "Epoch 463/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2155 - accuracy: 0.9067 - val_loss: 0.3093 - val_accuracy: 0.8846\n",
      "Epoch 464/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.1955 - accuracy: 0.9154 - val_loss: 0.2109 - val_accuracy: 0.8846\n",
      "Epoch 465/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2015 - accuracy: 0.9154 - val_loss: 0.2352 - val_accuracy: 0.8846\n",
      "Epoch 466/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1959 - accuracy: 0.9219 - val_loss: 0.2084 - val_accuracy: 0.9038\n",
      "Epoch 467/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.1854 - accuracy: 0.9241 - val_loss: 0.2281 - val_accuracy: 0.8846\n",
      "Epoch 468/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2342 - accuracy: 0.8959 - val_loss: 0.2604 - val_accuracy: 0.8654\n",
      "Epoch 469/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2002 - accuracy: 0.9197 - val_loss: 0.3182 - val_accuracy: 0.8846\n",
      "Epoch 470/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2075 - accuracy: 0.9219 - val_loss: 0.2388 - val_accuracy: 0.8846\n",
      "Epoch 471/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1706 - accuracy: 0.9262 - val_loss: 0.2618 - val_accuracy: 0.9038\n",
      "Epoch 472/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2036 - accuracy: 0.9197 - val_loss: 0.2181 - val_accuracy: 0.9038\n",
      "Epoch 473/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2324 - accuracy: 0.9002 - val_loss: 0.2604 - val_accuracy: 0.8846\n",
      "Epoch 474/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.2029 - accuracy: 0.9154 - val_loss: 0.2294 - val_accuracy: 0.8846\n",
      "Epoch 475/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.1942 - accuracy: 0.9176 - val_loss: 0.2175 - val_accuracy: 0.9038\n",
      "Epoch 476/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.2070 - accuracy: 0.9197 - val_loss: 0.2138 - val_accuracy: 0.9231\n",
      "Epoch 477/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.1949 - accuracy: 0.9197 - val_loss: 0.2178 - val_accuracy: 0.9038\n",
      "Epoch 478/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.1909 - accuracy: 0.9197 - val_loss: 0.2280 - val_accuracy: 0.9038\n",
      "Epoch 479/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.1860 - accuracy: 0.9197 - val_loss: 0.2083 - val_accuracy: 0.9038\n",
      "Epoch 480/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2016 - accuracy: 0.9067 - val_loss: 0.3061 - val_accuracy: 0.8846\n",
      "Epoch 481/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2109 - accuracy: 0.9024 - val_loss: 0.2144 - val_accuracy: 0.9231\n",
      "Epoch 482/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2127 - accuracy: 0.9154 - val_loss: 0.2204 - val_accuracy: 0.9231\n",
      "Epoch 483/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2223 - accuracy: 0.9024 - val_loss: 0.2261 - val_accuracy: 0.9231\n",
      "Epoch 484/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.1898 - accuracy: 0.9306 - val_loss: 0.2085 - val_accuracy: 0.9038\n",
      "Epoch 485/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.1879 - accuracy: 0.9262 - val_loss: 0.2609 - val_accuracy: 0.8654\n",
      "Epoch 486/500\n",
      "461/461 [==============================] - 0s 101us/step - loss: 0.1935 - accuracy: 0.9132 - val_loss: 0.2421 - val_accuracy: 0.8654\n",
      "Epoch 487/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1957 - accuracy: 0.9262 - val_loss: 0.2400 - val_accuracy: 0.8846\n",
      "Epoch 488/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1972 - accuracy: 0.9176 - val_loss: 0.2087 - val_accuracy: 0.9038\n",
      "Epoch 489/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.1972 - accuracy: 0.9284 - val_loss: 0.2108 - val_accuracy: 0.9038\n",
      "Epoch 490/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1911 - accuracy: 0.9132 - val_loss: 0.2318 - val_accuracy: 0.8846\n",
      "Epoch 491/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2159 - accuracy: 0.9111 - val_loss: 0.2104 - val_accuracy: 0.9231\n",
      "Epoch 492/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1901 - accuracy: 0.9154 - val_loss: 0.2620 - val_accuracy: 0.8846\n",
      "Epoch 493/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1861 - accuracy: 0.9089 - val_loss: 0.2418 - val_accuracy: 0.8846\n",
      "Epoch 494/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.1922 - accuracy: 0.9262 - val_loss: 0.2179 - val_accuracy: 0.9038\n",
      "Epoch 495/500\n",
      "461/461 [==============================] - 0s 106us/step - loss: 0.2646 - accuracy: 0.9024 - val_loss: 0.2284 - val_accuracy: 0.9038\n",
      "Epoch 496/500\n",
      "461/461 [==============================] - 0s 107us/step - loss: 0.1913 - accuracy: 0.9219 - val_loss: 0.2275 - val_accuracy: 0.8846\n",
      "Epoch 497/500\n",
      "461/461 [==============================] - 0s 104us/step - loss: 0.2029 - accuracy: 0.9306 - val_loss: 0.2207 - val_accuracy: 0.9038\n",
      "Epoch 498/500\n",
      "461/461 [==============================] - 0s 105us/step - loss: 0.2171 - accuracy: 0.9089 - val_loss: 0.2122 - val_accuracy: 0.9038\n",
      "Epoch 499/500\n",
      "461/461 [==============================] - 0s 103us/step - loss: 0.1869 - accuracy: 0.9328 - val_loss: 0.3046 - val_accuracy: 0.8846\n",
      "Epoch 500/500\n",
      "461/461 [==============================] - 0s 102us/step - loss: 0.2211 - accuracy: 0.9111 - val_loss: 0.2202 - val_accuracy: 0.9038\n"
     ]
    }
   ],
   "source": [
    "#training our ANN Model\n",
    "history = classifier.fit(X_train, \n",
    "                         Y_train, \n",
    "                         batch_size = 16, \n",
    "                         epochs = 500, \n",
    "                         validation_split=0.10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 245
    },
    "colab_type": "code",
    "id": "sLe6qemayUY4",
    "outputId": "4f3e8378-c738-4207-8c2f-cbcadc0b0384"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[7.4163496e-01]\n",
      " [3.8907290e-01]\n",
      " [9.7365999e-01]\n",
      " [6.7952275e-03]\n",
      " [1.4174521e-02]\n",
      " [7.9986823e-01]\n",
      " [9.0889496e-01]\n",
      " [9.8771608e-01]\n",
      " [2.9802322e-07]\n",
      " [9.9134064e-01]\n",
      " [9.0967190e-01]\n",
      " [9.8658764e-01]\n",
      " [9.9234152e-01]\n",
      " [8.6085236e-01]\n",
      " [9.5550251e-01]\n",
      " [9.3847322e-01]\n",
      " [9.4265825e-01]\n",
      " [9.1038167e-01]\n",
      " [9.1247225e-01]\n",
      " [7.6398885e-01]\n",
      " [2.9668570e-02]\n",
      " [9.9332774e-01]\n",
      " [1.4157295e-03]\n",
      " [9.3784571e-01]\n",
      " [9.8694491e-01]\n",
      " [9.8633736e-01]\n",
      " [9.9200982e-01]\n",
      " [9.8744702e-01]\n",
      " [8.9804339e-01]\n",
      " [8.6825716e-01]\n",
      " [9.4830704e-01]\n",
      " [9.3208295e-01]\n",
      " [8.7038791e-01]\n",
      " [9.8889208e-01]\n",
      " [9.9408537e-01]\n",
      " [9.8449063e-01]\n",
      " [8.5549456e-01]\n",
      " [9.8855484e-01]\n",
      " [9.8934782e-01]\n",
      " [9.5058751e-01]\n",
      " [9.9302089e-01]\n",
      " [9.5658791e-01]\n",
      " [9.9372470e-01]\n",
      " [9.9248028e-01]\n",
      " [9.8730367e-01]\n",
      " [9.4919109e-01]\n",
      " [9.8831046e-01]\n",
      " [9.2496645e-01]\n",
      " [9.8804772e-01]\n",
      " [8.4874004e-01]\n",
      " [3.0142665e-03]\n",
      " [9.5844269e-05]\n",
      " [2.1317005e-03]\n",
      " [4.0534317e-01]\n",
      " [6.1255693e-04]\n",
      " [9.1146761e-01]]\n",
      "[[ True]\n",
      " [False]\n",
      " [ True]\n",
      " [False]\n",
      " [False]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [False]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [False]\n",
      " [ True]\n",
      " [False]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [ True]\n",
      " [False]\n",
      " [False]\n",
      " [False]\n",
      " [False]\n",
      " [False]\n",
      " [ True]]\n",
      "Accuracy Score: 0.9642857142857143\n",
      "Precision Score: 0.9555555555555556\n",
      "Recall Score: 1.0\n",
      "F1 Score: 0.9772727272727273\n",
      "Classification Report: \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.85      0.92        13\n",
      "           1       0.96      1.00      0.98        43\n",
      "\n",
      "    accuracy                           0.96        56\n",
      "   macro avg       0.98      0.92      0.95        56\n",
      "weighted avg       0.97      0.96      0.96        56\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Part 3 - Making predictions and evaluating the model\n",
    "\n",
    "# Predicting the Test set results\n",
    "ann_pred = classifier.predict(X_test)\n",
    "print(ann_pred)\n",
    "ann_pred = (ann_pred > 0.5)\n",
    "print(ann_pred)\n",
    "#Model Evaluation\n",
    "ann = accuracy_score(Y_test, ann_pred)\n",
    "print('Accuracy Score: ' + str(ann))\n",
    "\n",
    "print('Precision Score: ' + str(precision_score(Y_test, ann_pred)))\n",
    "\n",
    "print('Recall Score: ' + str(recall_score(Y_test, ann_pred)))\n",
    "\n",
    "print('F1 Score: ' + str(f1_score(Y_test, ann_pred)))\n",
    "\n",
    "print('Classification Report: \\n' + str(classification_report(Y_test, ann_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 402,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7fb055f828d0>"
      ]
     },
     "execution_count": 402,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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/PjxzJo1i3379ll86wE4duwYV69eZe7cuQwaNIhly5YVvTZaJcRCVpasoyCKpFq1aqxatYqNGzfy5Zdf5vp88ODB/Pe//1XXMu/YsSPfffedOkLk2rVruX7vH374YX788UfS09NJSUlh586dmmL5+eefuXbtGmlpaezYsYOHHnqIdu3asWPHDlJTU0lNTWX79u3qxfB2iYmJmM1munXrxpgxY/j9998BGDp0KO+++y5JSUkAJCUl5epcTUpKolq1ari5uREXF8fu3bsBSElJISkpieDgYN5//31Onz4NwIULF2jdujVjxozBw8MDo9GoqX5t2rTh8OHD/PVXdv9RWloa586dK3S/xo0bc+HCBTXWQ4cOcejQIQ4ePMjBgweZOnUqmzdvBqB9+/Z8/fXXQHaH9TfffKM+e/Wf//yHefPmqec0m80sWbIk1/ly7hTu/HdnQoDsQTkuLi4cOXIERVHYsGEDjz32WK5yaWlppKamArB37170ej1NmzbFZDKpo6Vu3brFjz/+yH333afud/78eZo1a1bo/1FhNN0p3NkR4ujoSIMGDSzaxwoSFRWFl5eXmhUDAgI4fPgw3t7/Nt/8+uuvBAYGotPpaNq0KSkpKVy7di1Xx12J+GddZhmOKorK3d2d//73v/zf//2f+q0yh4eHB127dmXp0qVA9rfNt99+m+effx5FUdDr9UyZMsXi975ly5aEhobSpUsXvL298fPz0zRTwEMPPcTw4cO5cOECPXr0UEfzPPfcc+p8ZM8//zwtWrTg77//ttg3OjqaUaNGqU+65tzJ9OvXj9TUVJ544gl1WpE729WbN29OixYtCAoKon79+jz0UPbddnJyMgMHDiQjIwNFUdS13D/66CP++usvFEWhY8eONG/enAMHDhRaP4PBwKxZs3jjjTfIzMwE4O2338bHx6fA/Tp37qzexX3//fd06NCBqlWrqp+Hhoby0UcfkZGRwZtvvsm4cePUpq5HH32U//u//wOy2/UnT57MG2+8QVpaGjqdjuDg4ELjLsy0adMYOXIk6enpBAUFqdfWH374gRMnTjBmzBji4+N54YUXsLOzw8vLi7lz5wLZ/VovvPACJpOJrKwsAgMD6du3r3rsw4cPqwMO7oZOKeT+1Ww2s3DhQgYPHkyVKlWKdZJffvmF48ePqyMq9u7dS2RkJK+88opaZvr06XTv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ATc3N5555hm6dOliUeabb75h69atODo6qr8XALdu3eLLL7/kwIEDmEwmHnroIfr374+Dg0Oh573To48+CmQ3V+bF19eXefPm8corrxT52BWNJIVyTFEUHn30UUaOHInZbGbRokUsX76ct99+O1fZtWvX4ufnx6RJkzCZTJw/fx6A9PR0PvroI3r16sX48eO5ePEiU6ZMoV69etSrV6/A89+8eZODBw/SsGFDkpOTmT59OgMGDKBDhw4cOHCA6dOnM3fuXKpUqUJYWBjTpk2jbt26XLt2Lc9vwO+//z69evXik08+UZtlbm/z7tChAxs2bCA1NRUnJyfMZjMHDhxg9OjRAMyfP58aNWowd+5cMjIymD59OgaDIddF6E4mk4k9e/bg6uqKs7MzkH1h7tevHz4+PiQkJDBt2jR27NhBt27d8ozz/PnzLFq0iHfeeQcfHx/27t3LjBkzmD17NlWqVLE4X3p6OrGxsfnOO5WVlcWuXbtwdHSkTp06rFixgtTUVObPn09SUhJTpkzB3d2dzp075/tzvV1ISAh//vlnruajHB4eHjRt2pRffvmFkJAQ4N+1GPR6PYcOHWLjxo2888471KlTh02bNjFnzpwC+4JyVK9enXfeeYfatWvzxx9/MHXqVHx8fNTVwa5fv05SUhKLFy8mMjKSadOm4ePjQ926dfniiy+IiYnhk08+wd7enjlz5rBhwwZeeOGFXOdZtmwZAK+++mqhMeXF29ubuLg49XerMpPmo3Lkk08+oX///vTv358ZM2bg6upKu3btqFq1KtWqVaNnz5788ccfee6r1+uJi4vj2rVrODg40KxZMyB7LpmaNWsSFBSEvb09jRo1om3btvzyyy/5xhEWFkb//v0ZM2YM7u7u9OvXj6NHj+Ll5UVgYCD29vZ07NiRunXrcuTIESB7Ot9Lly6RmZmJu7t7oQknLzVr1uTee+9VF1Y5efIkVatWpWnTply/fp3jx4/Tv39/HB0dqV69Ot26dWP//v35Hu/AgQP079+fvn37snPnTkaNGoW9vT0AjRo1omnTptjb21OrVi1CQkI4ffp0vsfauXMnISEhNGnSBDs7Ox599FH0ej2RkZG5yqampgLZS6HeLjIykv79+zNo0CD27dvH6NGjcXR0ZP/+/bzwwgtUq1aNWrVq8eSTT7J3714g/59rUXXs2JF9+/YB2V82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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "p_svc = SVC(kernel = 'poly')\n",
    "metrics.plot_roc_curve(p_svc.fit(X_train, Y_train), X_test, Y_test)\n",
    "metrics.plot_roc_curve(randomforest.fit(X_train, Y_train), X_test, Y_test)\n",
    "metrics.plot_roc_curve(knn.fit(X_train, Y_train), X_test, Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "TPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Breast Cancer Detection Using Various Architectures.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
